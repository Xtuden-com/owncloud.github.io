<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infinite Scale on ownCloud</title>
    <link>https://owncloud.github.io/ocis/</link>
    <description>Recent content in Infinite Scale on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2020 20:35:00 +0100</lastBuildDate>
    
	<atom:link href="https://owncloud.github.io/ocis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started with Development</title>
      <link>https://owncloud.github.io/ocis/development/</link>
      <pubDate>Tue, 07 Jul 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/</guid>
      <description>Docker dev environment  Option 1: Plain docker Option 2: Docker compose   Verification     Docker dev environment Option 1: Plain docker To build and run your local ocis code with default storage driver
docker run --rm -ti --name ocis -v $PWD:/ocis -p 9200:9200 owncloud/eos-ocis-dev The eos-ocis-dev container will build and run ocis using the owncloud storage driver and store files in the container at /var/tmp/reva/data/&amp;lt;username&amp;gt;/files</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/ocis/getting-started/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/getting-started/</guid>
      <description>Installation  Docker  Dependencies Docker compose   Binaries  Dependencies     Usage  Server Health   Quickstart for Developers Runtime Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.github.io/ocis/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/basic-remote-setup/</guid>
      <description>Use the binary  Add your hostname to the idp config Start the ocis fullstack server   Use Docker Compose     Out of the box the ocis single binary and the owncloud/ocis docker image are configured to run on localhost for quick testing and development.
If you need to access ocis on a VM or a remote machine e.g. when testing a mobile client you need to configure ocis to run on a different host.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/ocis/configuration/</link>
      <pubDate>Mon, 21 Sep 2020 13:14:56 +0200</pubDate>
      
      <guid>https://owncloud.github.io/ocis/configuration/</guid>
      <description>Configuration  Configuration using config files Envrionment variables Commandline flags   Root Command Sub Commands  ocis health ocis server List of available Extension subcommands  ocis konnectd ocis run ocis store ocis glauth ocis ocs ocis reva-storage-eos-data ocis reva-storage-home-data ocis kill ocis proxy ocis reva-auth-bearer ocis reva-storage-oc-data ocis settings ocis accounts ocis phoenix ocis reva-storage-eos ocis reva-storage-home ocis reva-storage-oc ocis reva-storage-root ocis reva-gateway ocis reva-sharing ocis reva-users ocis list ocis reva-auth-basic ocis reva-frontend ocis reva-storage-public-link ocis thumbnails ocis webdav         Configuration oCIS Single Binary is not responsible for configuring extensions.</description>
    </item>
    
    <item>
      <title>Bridge</title>
      <link>https://owncloud.github.io/ocis/bridge/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/bridge/</guid>
      <description>Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running   Start ocis-phoenix  Get it! Run it!   Start ocis-konnectd  Get it! Set environment variables   Configure clients  Run it! Check it is up and running   Patch owncloud Install the owncloud 10 openidconnect app   Next steps     We are planning to build a bridge from ownCloud 10 to ocis.</description>
    </item>
    
    <item>
      <title>EOS</title>
      <link>https://owncloud.github.io/ocis/eos/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/eos/</guid>
      <description>Docker dev environment for eos storage  1. Start eos &amp;amp; ocis containers 2. LDAP support 3. Home storage 4. Home data provider   Verification Further exploration Cleaning up Troubleshooting  Docker-compose exits right away Where are the logs ? How do I update a service in the ocis container? Creation and upload of files does not work Uploading big files appears to hang Running out of space quickly       OCIS can be configured to run on top of eos.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.github.io/ocis/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/testing/</guid>
      <description>Acceptance tests We are using the ownCloud 10 acceptance testsuite against ocis. To set this up you need the owncloud 10 core repo, a ldap server that the acceptance tests can use to manage users, a redis server for file-versions and the ocis code.
Getting the tests All you need to do to get the acceptance tests is check out the core repo:
git clone https://github.com/owncloud/core.git Run a redis server in a docker container File versions need a redis server.</description>
    </item>
    
    <item>
      <title>Extension</title>
      <link>https://owncloud.github.io/ocis/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/extensions/</guid>
      <description>How to build and run ocis-simple Hacking ocis-hello  Option 1:   Hacking phoenix (and ocis-phoenix) The ownCloud design system External phoenix apps Phoenix extension points  Phoenix core Files app   API driven development     How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag.</description>
    </item>
    
    <item>
      <title>Login Flow</title>
      <link>https://owncloud.github.io/ocis/login-flow/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/login-flow/</guid>
      <description>Login Flow The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well.:
  mermaid.initialize({ flowchart: { useMaxWidth: true } });  sequenceDiagram %% we have comments!! \o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth %% TODO add PKCE, see https://developer.</description>
    </item>
    
    <item>
      <title>Request Flow</title>
      <link>https://owncloud.github.io/ocis/request-flow/</link>
      <pubDate>Mon, 27 Apr 2020 16:07:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/request-flow/</guid>
      <description>Request Flow The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:
  mermaid.initialize({ flowchart: { useMaxWidth: true } });  sequenceDiagram %% we have comments!! \o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home?</description>
    </item>
    
    <item>
      <title>Public upload Flow</title>
      <link>https://owncloud.github.io/ocis/public-upload-flow/</link>
      <pubDate>Mon, 27 Jul 2020 14:16:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/public-upload-flow/</guid>
      <description>Public Upload flow The following diagram describes the flow of requests:
ocis-reva sharing
REVA_SHARING_ADDR = 0.0.0.0:9150
ocis-reva sharing...ocis-reva frontend
REVA_FRONTEND_ADDR = 0.0.0.0:9140
REVA_GATEWAY_URL = ocis:9142
ocis-reva frontend...ocis-proxy
PROXY_HTTP_ADDR = 0.0.0.0:9200
ocis-proxy...2  POST http://ocis:9140/remote.php/dav/files/einstein/2 POST http:/...ocdav
prefix = &#34;&#34;
timeout = 86400
ocdav...datagateway
prefix = &#34;data&#34;
timeout = 86400
datagateway...client
client&amp;#xa;22  PATCH https://oc.example.org/data/{token}
Tus-Resumable: 1.0.022 PATCH http...ocis-reva gateway
REVA_GATEWAY_ADDR = 0.0.0.0:9142
ocis-reva gateway...storage-registry
storage-registry&amp;#xa;Expose: trueExpose: true24  PATCH http://ocis:9156/data/u-u-i-d24 PATCH http.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.github.io/ocis/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/debugging/</guid>
      <description>Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.
Ultimately, we want to be able to stop a single service using eg. ocis kill phoenix so that you can start the service you want to debug in debug mode. We need to change the way we fork processes though, otherwise the runtime will automatically restart a service if killed.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/ocis/building/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/building/</guid>
      <description>As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis.git cd ocis All required tools besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://owncloud.github.io/ocis/tracing/</link>
      <pubDate>Wed, 13 May 2020 12:09:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/tracing/</guid>
      <description>By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:
 Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \ -p 5775:5775/udp \ -p 6831:6831/udp \ -p 6832:6832/udp \ -p 5778:5778 \ -p 16686:16686 \ -p 14268:14268 \ -p 14250:14250 \ -p 9411:9411 \ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.</description>
    </item>
    
    <item>
      <title>Building the documentation</title>
      <link>https://owncloud.github.io/ocis/building-docs/</link>
      <pubDate>Mon, 27 Jul 2020 08:39:38 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/building-docs/</guid>
      <description>Buildling the documentation  Setting up Viewing the documentation Deploying the documentation       Buildling the documentation Following steps can be applied for every oCIS extension repository.
Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:
cd hugo hugo -D server Then open &amp;ldquo;http://localhost:1313/&amp;rdquo;
When making changes to the docs, run make docs again and the server will pick up the changes and reload the page automatically</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/ocis/license/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
  </channel>
</rss>